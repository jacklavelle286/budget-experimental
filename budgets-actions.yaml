AWSTemplateFormatVersion: 2010-09-09
Description: |
  This solution consists of a worklflow in which when a budget is triggered, it triggers an SNS topic, which triggers a lambda function which stops all running EC2 instances, and deactivates an IAM keys.

Parameters:
  BudgetAmountPerMonth:
    Type: Number
    Description: "The total budget value per account in USD, per month (which will trigger the stopping of EC2 instances and disabling of all IAM keys.)"

Resources:
  Budget:
    Type: "AWS::Budgets::Budget"
    Properties:
      Budget:
        BudgetLimit:
          Amount: !Ref BudgetAmountPerMonth
          Unit: USD
        TimeUnit: MONTHLY
        BudgetType: COST
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 100
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref SNSTopicBudget

  SNSTopicBudget:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "BudgetActionsTopic"

  SNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Protocol: "lambda"
      Endpoint: !GetAtt BudgetAlertLambda.Arn
      TopicArn: !Ref SNSTopicBudget

  SNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Action:
              - SNS:Publish
            Resource: !Ref SNSTopicBudget
      Topics:
        - Ref: SNSTopicBudget

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt BudgetAlertLambda.Arn
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SNSTopicBudget

  BudgetLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaBudgetAlertPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeInstances"
                  - "ec2:StopInstances"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "iam:ListAccessKeys"
                  - "iam:UpdateAccessKey"
                  - "iam:ListUsers"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "*"

  BudgetAlertLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import logging

          # Initialize logger
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              # Initialize the Boto3 clients
              ec2_client = boto3.client('ec2')
              iam_client = boto3.client('iam')

              # Stop EC2 instances
              stop_ec2_instances(ec2_client)

              # Deactivate IAM Access Keys
              deactivate_iam_keys(iam_client)

              return {
                  'statusCode': 200,
                  'body': 'EC2 instances stopped and IAM access keys deactivated.'
              }

          def stop_ec2_instances(ec2_client):
              try:
                  # Describe all EC2 instances
                  instances = ec2_client.describe_instances(
                      Filters=[{'Name': 'instance-state-name', 'Values': ['running']}]
                  )

                  # Extract instance IDs
                  instance_ids = [instance['InstanceId'] for reservation in instances['Reservations'] for instance in reservation['Instances']]

                  if instance_ids:
                      # Stop instances
                      ec2_client.stop_instances(InstanceIds=instance_ids)
                      logger.info(f'Stopped instances: {instance_ids}')
                  else:
                      logger.info('No running instances to stop.')
              except Exception as e:
                  logger.error(f'Error stopping EC2 instances: {e}')

          def deactivate_iam_keys(iam_client):
              try:
                  # List all IAM users
                  users = iam_client.list_users()

                  for user in users['Users']:
                      # List access keys for each user
                      access_keys = iam_client.list_access_keys(UserName=user['UserName'])

                      for key in access_keys['AccessKeyMetadata']:
                          if key['Status'] == 'Active':
                              # Deactivate active access keys
                              iam_client.update_access_key(
                                  UserName=user['UserName'],
                                  AccessKeyId=key['AccessKeyId'],
                                  Status='Inactive'
                              )
                              logger.info(f'Deactivated access key {key["AccessKeyId"]} for user {user["UserName"]}')
              except Exception as e:
                  logger.error(f'Error deactivating IAM access keys: {e}')

      FunctionName: "BudgetAlertStopInstancesIAM"
      Handler: "index.lambda_handler"
      Role: !GetAtt BudgetLambdaRole.Arn
      Runtime: "python3.11"
      Timeout: 300
